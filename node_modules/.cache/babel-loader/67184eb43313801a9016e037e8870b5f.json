{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acer\\\\Desktop\\\\PROJET_CODE\\\\TypeScript-Quiz-Starter-master\\\\src\\\\App.tsx\";\nimport React, { Component } from \"react\";\nimport { Container, Grid, Snackbar } from '@material-ui/core';\nimport Box from '@material-ui/core/Box';\nimport { StyledButtonTrue, StyledButtonFalse } from \"./style\";\nimport { connect } from \"react-redux\"; // import { AnyAction } from \"redux\";\n// import { IStore } from \"./reducers\";\n\nimport { getQuizListItem, giveAnswer, restart } from \"./actions/quiz\";\nimport { getCurrentQuizListItem } from \"./selectors/quiz\";\nexport class App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      message: \"\",\n      isOpen: false,\n      className: \"good\"\n    };\n\n    this.renderHeader = () => {\n      return /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        direction: \"row\",\n        justify: \"space-between\",\n        alignItems: \"flex-start\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Box, {\n        mt: 10,\n        fontWeight: \"fontWeightBold\",\n        fontSize: 40,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          color: \"#e55fff\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 9\n        }\n      }, \"Easy\"), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          color: \"#2858fb\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 9\n        }\n      }, \"Quizy\")), /*#__PURE__*/React.createElement(Box, {\n        mt: 10,\n        style: {\n          color: \"#2858fb\"\n        },\n        fontSize: 20,\n        className: \"txt\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 7\n        }\n      }, \" Score : \", this.props.scrore, \" / \", this.props.quizListLength));\n    };\n\n    this.renderQuestionInfo = () => {\n      const {\n        quizListLength,\n        currentQuizItemIndex,\n        currentQuizItem\n      } = this.props;\n      return /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        direction: \"column\",\n        alignItems: \"center\",\n        justify: \"center\",\n        style: {\n          minHeight: '40vh'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"txt question_number\",\n        style: {\n          color: \"#09913d\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 7\n        }\n      }, \"Question N\\xB0 \", currentQuizItemIndex + 1, \" / \", quizListLength, \" \"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"txt question_number\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 7\n        }\n      }, \" Category \", currentQuizItem.category, \" \"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"txt\",\n        dangerouslySetInnerHTML: {\n          __html: currentQuizItem.question\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 7\n        }\n      }));\n    };\n\n    this.answerQestion = answer => () => {\n      var _this$props$currentQu;\n\n      const isCorrectAnswer = ((_this$props$currentQu = this.props.currentQuizItem) === null || _this$props$currentQu === void 0 ? void 0 : _this$props$currentQu.correct_answer) === answer;\n      this.props.giveAnswer(isCorrectAnswer, this.props.currentQuizItemIndex === this.props.quizListLength - 1);\n      this.setState({\n        message: isCorrectAnswer ? \"Well done !\" : \"Nope.\",\n        className: isCorrectAnswer ? \"good\" : \"wrong\",\n        isOpen: true\n      });\n    };\n\n    this.renderButton = () => {\n      if (this.props.currentQuizItemIndex < this.props.quizListLength - 1) {\n        return /*#__PURE__*/React.createElement(Grid, {\n          container: true,\n          direction: \"row\",\n          alignItems: \"center\",\n          justify: \"space-evenly\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(StyledButtonTrue, {\n          onClick: this.answerQestion(\"True\"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 11\n          }\n        }, \"TRUE\"), /*#__PURE__*/React.createElement(StyledButtonFalse, {\n          onClick: this.answerQestion(\"False\"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 11\n          }\n        }, \"FALSE\"));\n      } else {\n        return /*#__PURE__*/React.createElement(Grid, {\n          container: true,\n          direction: \"column\",\n          alignItems: \"center\",\n          justify: \"center\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(Box, {\n          mt: 10,\n          fontSize: 20,\n          style: {\n            marginBottom: \"2rem\"\n          },\n          className: \"txt\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 11\n          }\n        }, \"Final Score : \", this.props.scrore, \" / \", this.props.quizListLength), /*#__PURE__*/React.createElement(StyledButtonTrue, {\n          onClick: this.props.restart,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 11\n          }\n        }, \"Restart\"));\n      }\n    };\n\n    this.onSnackBarClose = () => {\n      this.setState({\n        isOpen: false\n      });\n    };\n\n    this.renderContent = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 7\n        }\n      }, this.renderHeader(), this.props.currentQuizItem && this.props.currentQuizItemIndex < this.props.quizListLength - 1 && this.renderQuestionInfo(), this.renderButton(), /*#__PURE__*/React.createElement(Snackbar, {\n        anchorOrigin: {\n          vertical: \"bottom\",\n          horizontal: \"center\"\n        },\n        autoHideDuration: 400,\n        open: this.state.isOpen,\n        onClose: this.onSnackBarClose,\n        message: this.state.message,\n        className: this.state.className,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 9\n        }\n      }));\n    };\n  }\n\n  componentDidMount() {\n    this.props.getQuizListItem(10, \"easy\");\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Container, {\n      fixed: true,\n      className: \"cont\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 7\n      }\n    }, this.props.currentQuizItem ? this.renderContent() : '');\n  }\n\n}\n\nconst mapStateToProps = state => {\n  const s = state;\n  return {\n    currentQuizItem: getCurrentQuizListItem(s),\n    currentQuizItemIndex: s.quiz.currentQuizItemIndex,\n    quizListLength: s.quiz.quizListItem.length,\n    scrore: s.quiz.score\n  };\n};\n\nconst mapDispatchToProps = {\n  getQuizListItem,\n  giveAnswer,\n  restart\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["C:/Users/acer/Desktop/PROJET_CODE/TypeScript-Quiz-Starter-master/src/App.tsx"],"names":["React","Component","Container","Grid","Snackbar","Box","StyledButtonTrue","StyledButtonFalse","connect","getQuizListItem","giveAnswer","restart","getCurrentQuizListItem","App","state","message","isOpen","className","renderHeader","color","props","scrore","quizListLength","renderQuestionInfo","currentQuizItemIndex","currentQuizItem","minHeight","category","__html","question","answerQestion","answer","isCorrectAnswer","correct_answer","setState","renderButton","marginBottom","onSnackBarClose","renderContent","vertical","horizontal","componentDidMount","render","mapStateToProps","s","quiz","quizListItem","length","score","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Container, Grid, Snackbar } from '@material-ui/core';\r\nimport Box from '@material-ui/core/Box';\r\nimport { StyledButtonTrue, StyledButtonFalse } from \"./style\";\r\nimport { connect } from \"react-redux\";\r\n// import { AnyAction } from \"redux\";\r\n// import { IStore } from \"./reducers\";\r\nimport { getQuizListItem, giveAnswer, restart } from \"./actions/quiz\";\r\nimport { IQuizListItem } from \"./models\";\r\nimport { IStore } from \"./reducers\";\r\nimport { getCurrentQuizListItem } from \"./selectors/quiz\";\r\n\r\ninterface OwnProps {\r\n\r\n}\r\ninterface StateProps {\r\n  currentQuizItem?: IQuizListItem;\r\n  currentQuizItemIndex: number;\r\n  quizListLength: number;\r\n  scrore: number;\r\n}\r\ninterface DispatchProps {\r\n  getQuizListItem: typeof getQuizListItem;\r\n  giveAnswer: typeof giveAnswer;\r\n  restart: typeof restart;\r\n}\r\n\r\ninterface LocalStateProps{\r\n  message : string;\r\n  isOpen : boolean;\r\n  className : \"good\" | \"wrong\"\r\n}\r\n\r\ntype Props = OwnProps & StateProps & DispatchProps;\r\n\r\nexport class App extends Component<Props, LocalStateProps> {\r\n\r\n  state: LocalStateProps = { message: \"\", isOpen: false, className:\"good\"}\r\n  componentDidMount() {\r\n    this.props.getQuizListItem(10, \"easy\");\r\n  }\r\n  private renderHeader = () => {\r\n    return (<Grid container direction=\"row\" justify=\"space-between\" alignItems=\"flex-start\">\r\n      <Box mt={10} fontWeight=\"fontWeightBold\" fontSize={40} >\r\n        <div style={{ color: \"#e55fff\" }}>Easy</div>\r\n        <div style={{ color: \"#2858fb\" }} >Quizy</div>\r\n      </Box>\r\n      <Box mt={10} style={{ color: \"#2858fb\" }} fontSize={20} className=\"txt\"> Score : {this.props.scrore} / {this.props.quizListLength}</Box>\r\n    </Grid>)\r\n  }\r\n\r\n  private renderQuestionInfo = () => {\r\n    const { quizListLength, currentQuizItemIndex, currentQuizItem } = this.props\r\n    return (<Grid container direction=\"column\" alignItems=\"center\" justify=\"center\" style={{ minHeight: '40vh' }}>\r\n      <div className=\"txt question_number\" style={{ color: \"#09913d\" }}>Question N° {currentQuizItemIndex + 1} / {quizListLength} </div>\r\n      <div className=\"txt question_number\"> Category {currentQuizItem!.category} </div>\r\n      <div className=\"txt\" dangerouslySetInnerHTML={{ __html: currentQuizItem!.question }} />\r\n    </Grid>)\r\n  }\r\n  private answerQestion = (answer: \"True\" | \"False\") => () => {\r\n    const isCorrectAnswer = this.props.currentQuizItem?.correct_answer === answer\r\n    this.props.giveAnswer(isCorrectAnswer, this.props.currentQuizItemIndex === this.props.quizListLength - 1)\r\n    this.setState({ message: isCorrectAnswer ? \"Well done !\" : \"Nope.\", className: isCorrectAnswer ? \"good\" : \"wrong\", isOpen: true})\r\n  }\r\n  private renderButton = () => {\r\n    if (this.props.currentQuizItemIndex < this.props.quizListLength - 1) {\r\n      return (\r\n        <Grid container direction=\"row\" alignItems=\"center\" justify=\"space-evenly\" >\r\n          <StyledButtonTrue onClick={this.answerQestion(\"True\")} >TRUE</StyledButtonTrue>\r\n          <StyledButtonFalse onClick={this.answerQestion(\"False\")} >FALSE</StyledButtonFalse>\r\n        </Grid>\r\n      )\r\n    } else {\r\n      return (\r\n        <Grid container direction=\"column\" alignItems=\"center\" justify=\"center\" >\r\n          <Box mt={10} fontSize={20} style={{ marginBottom: \"2rem\" }} className=\"txt\">Final Score : {this.props.scrore} / {this.props.quizListLength}</Box>\r\n          <StyledButtonTrue onClick={this.props.restart} >Restart</StyledButtonTrue>\r\n        </Grid>\r\n      )\r\n    }\r\n  }\r\n  private onSnackBarClose=()=>{\r\n    this.setState({isOpen: false})\r\n  }\r\n  private renderContent = () => {\r\n    return (\r\n      <div>\r\n        {this.renderHeader()}\r\n        {this.props.currentQuizItem && this.props.currentQuizItemIndex < this.props.quizListLength - 1 && this.renderQuestionInfo()}\r\n        {this.renderButton()}\r\n        <Snackbar anchorOrigin={{ vertical:\"bottom\", horizontal:\"center\"}}\r\n                  autoHideDuration={400}\r\n                  open={this.state.isOpen}\r\n                  onClose={this.onSnackBarClose}\r\n                  message={this.state.message}\r\n                  className={this.state.className}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n  render() {\r\n    return (\r\n      <Container fixed={true} className=\"cont\">\r\n        {this.props.currentQuizItem ? this.renderContent() : ''}\r\n      </Container >\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any): StateProps => {\r\n  const s = state as IStore\r\n  return {\r\n    currentQuizItem: getCurrentQuizListItem(s),\r\n    currentQuizItemIndex: s.quiz.currentQuizItemIndex,\r\n    quizListLength: s.quiz.quizListItem.length,\r\n    scrore: s.quiz.score\r\n  }\r\n}\r\n\r\n\r\nconst mapDispatchToProps: any = {\r\n  getQuizListItem,\r\n  giveAnswer,\r\n  restart\r\n}\r\n\r\nexport default connect<StateProps, DispatchProps, OwnProps>(mapStateToProps, mapDispatchToProps)(App)\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}